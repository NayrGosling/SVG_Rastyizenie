from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from processor import process_file
import time
import os

INPUT_DIR = "/app/input"

def log(msg):
    print(f"[{time.strftime('%H:%M:%S')}] {msg}", flush=True)

class Handler(FileSystemEventHandler):
    def on_any_event(self, event):
        log(f"–°–æ–±—ã—Ç–∏–µ: {event.event_type}, –ü—É—Ç—å: {event.src_path}")
        if event.src_path.lower().endswith(".ai"):
            filename = os.path.basename(event.src_path)
            log(f"üìÅ –ù–æ–≤—ã–π —Ñ–∞–π–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {filename}")
            try:
                process_file(event.src_path)
            except Exception as e:
                log(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {filename}: {e}")

def process_existing_files():
    log(f"üìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –≤ {INPUT_DIR}")
    for filename in os.listdir(INPUT_DIR):
        if filename.lower().endswith(".ai"):
            file_path = os.path.join(INPUT_DIR, filename)
            log(f"üìÅ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª: {filename}")
            try:
                process_file(file_path)
            except Exception as e:
                log(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {filename}: {e}")

if __name__ == "__main__":
    if not os.path.exists(INPUT_DIR):
        log(f"‚ùå –ü–∞–ø–∫–∞ {INPUT_DIR} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        exit(1)
    log(f"üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ {INPUT_DIR} –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {os.listdir(INPUT_DIR)}")
    process_existing_files()  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
    observer = Observer()
    observer.schedule(Handler(), path=INPUT_DIR, recursive=False)
    observer.start()
    log(f"üü¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–ø–∫–∏ –∑–∞–ø—É—â–µ–Ω: {INPUT_DIR}")
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()